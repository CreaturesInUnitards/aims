const e=requestAnimationFrame,t=Array.isArray,o=Object,r=o.assign,s="function",n="object";export const merge=(()=>{const e=(r,f,i)=>{const a=typeof i;if(i&&a===n)if(t(i))for(const t of i)f=e(r,f,t);else for(const a of o.keys(i)){const l=i[a];typeof l===s?f[a]=l(f[a],c):void 0===l?r&&!isNaN(a)?f.splice(a,1):delete f[a]:null===l||typeof l!==n||l.constructor!==o||t(l)?f[a]=l:typeof f[a]===n?f[a]=l===f[a]?l:c(f[a],l):f[a]=e(!1,{},l)}else a===s&&(f=i(f,c));return f},c=(o,...s)=>{const n=t(o);return e(n,n?o.slice():r({},o),s)};return c})();export default({a:t=merge,i:s={},m:n=[e=>{}],s:c=!1}={},f)=>{let i=t({},s);const a=e=>{i=t(i,e)},l=r({get:()=>i},!c&&{patch:a}),p=[n].flat().map((e=>e(l,c&&a)));return r(l,...p),f&&e((()=>{const o=t;t=(t,r)=>(e((()=>{f(l)})),o(t,r)),f(l)})),o.freeze(l)};